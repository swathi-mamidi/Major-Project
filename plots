import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_percentage_error

# Load Data
data = pd.read_csv(r"C:\Users\M Swathi\Downloads\GRF_IMU_data.csv")

# Convert categorical variables
data['Sub'] = data['Sub'].astype('category')
data['IsFemale'] = data['IsFemale'].astype('category')

# Split Data
np.random.seed(541)
male_data = data[data['IsFemale'] == 0]
female_data = data[data['IsFemale'] == 1]

# Function to adjust test size
def adjusted_test_size(data_subset):
    unique_classes = len(data_subset['Sub'].unique())
    min_test_size = max(0.2, unique_classes / len(data_subset))
    return min_test_size if min_test_size * len(data_subset) >= unique_classes else unique_classes / len(data_subset)

test_size_male = adjusted_test_size(male_data)
test_size_female = adjusted_test_size(female_data)

train_male, test_male = train_test_split(male_data, test_size=test_size_male)
train_female, test_female = train_test_split(female_data, test_size=test_size_female)

train_data = pd.concat([train_male, train_female])
test_data = pd.concat([test_male, test_female])

# Define features and targets
features = ['Speed', 'IMUPeak', 'Mass', 'IMUsf']
X_train, X_test = train_data[features], test_data[features]
Y_train_peak, Y_test_peak = train_data['GRFPeak'], test_data['GRFPeak']
Y_train_impulse, Y_test_impulse = train_data['GRFImpulse'], test_data['GRFImpulse']
Y_train_tc, Y_test_tc = train_data['GRFtc'], test_data['GRFtc']

# Train Models
lm_peak = LinearRegression().fit(X_train, Y_train_peak)
lm_impulse = LinearRegression().fit(X_train, Y_train_impulse)
lm_tc = LinearRegression().fit(X_train, Y_train_tc)

rf_peak = RandomForestRegressor(n_estimators=100, random_state=541).fit(X_train, Y_train_peak)
rf_impulse = RandomForestRegressor(n_estimators=100, random_state=541).fit(X_train, Y_train_impulse)
rf_tc = RandomForestRegressor(n_estimators=100, random_state=541).fit(X_train, Y_train_tc)

# Predictions
lm_pred_peak = lm_peak.predict(X_test)
lm_pred_impulse = lm_impulse.predict(X_test)
lm_pred_tc = lm_tc.predict(X_test)

rf_pred_peak = rf_peak.predict(X_test)
rf_pred_impulse = rf_impulse.predict(X_test)
rf_pred_tc = rf_tc.predict(X_test)

# Plot function
def plot_predictions(y_actual, y_pred, title, ax):
    ax.scatter(y_pred, y_actual, edgecolors='black')
    ax.plot([min(y_actual), max(y_actual)], [min(y_actual), max(y_actual)], 'k--', lw=2)
    ax.set_xlabel("Predicted")
    ax.set_ylabel("Observed")
    ax.set_title(title)
    
    # Compute metrics
    rmse = np.sqrt(mean_squared_error(y_actual, y_pred))
    r2 = r2_score(y_actual, y_pred)
    mape = mean_absolute_percentage_error(y_actual, y_pred) * 100
    
    # Display metrics on the plot
    ax.text(min(y_actual), max(y_actual) * 0.9, f"r = {r2:.3f}\nRMSE: {rmse:.3f}\nMAPE: {mape:.2f}%", fontsize=10, bbox=dict(facecolor='white', alpha=0.6))

# Create subplots
fig, axes = plt.subplots(3, 2, figsize=(10, 12))
fig.suptitle("Model Predictions vs Observed Data", fontsize=14)

# Linear Regression Plots
plot_predictions(Y_test_peak, lm_pred_peak, "Linear Regression - Peak vGRF", axes[0, 1])
plot_predictions(Y_test_impulse, lm_pred_impulse, "Linear Regression - Vertical Impulse", axes[1, 1])
plot_predictions(Y_test_tc, lm_pred_tc, "Linear Regression - Contact Time", axes[2, 1])

# Random Forest Plots
plot_predictions(Y_test_peak, rf_pred_peak, "Random Forest - Peak vGRF", axes[0, 0])
plot_predictions(Y_test_impulse, rf_pred_impulse, "Random Forest - Vertical Impulse", axes[1, 0])
plot_predictions(Y_test_tc, rf_pred_tc, "Random Forest - Contact Time", axes[2, 0])

# Adjust layout
plt.tight_layout()
plt.subplots_adjust(top=0.95)
plt.show()
